// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.3
//   protoc               v3.20.3
// source: proxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "employee";

export interface EmployeeRequest {
  employeeIdList: number[];
}

export interface EmployeeResponse {
  message: string;
}

function createBaseEmployeeRequest(): EmployeeRequest {
  return { employeeIdList: [] };
}

export const EmployeeRequest: MessageFns<EmployeeRequest> = {
  encode(message: EmployeeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.employeeIdList) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmployeeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmployeeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.employeeIdList.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.employeeIdList.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmployeeRequest {
    return {
      employeeIdList: globalThis.Array.isArray(object?.employeeIdList)
        ? object.employeeIdList.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: EmployeeRequest): unknown {
    const obj: any = {};
    if (message.employeeIdList?.length) {
      obj.employeeIdList = message.employeeIdList.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmployeeRequest>, I>>(base?: I): EmployeeRequest {
    return EmployeeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmployeeRequest>, I>>(object: I): EmployeeRequest {
    const message = createBaseEmployeeRequest();
    message.employeeIdList = object.employeeIdList?.map((e) => e) || [];
    return message;
  },
};

function createBaseEmployeeResponse(): EmployeeResponse {
  return { message: "" };
}

export const EmployeeResponse: MessageFns<EmployeeResponse> = {
  encode(message: EmployeeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmployeeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmployeeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmployeeResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EmployeeResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmployeeResponse>, I>>(base?: I): EmployeeResponse {
    return EmployeeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmployeeResponse>, I>>(object: I): EmployeeResponse {
    const message = createBaseEmployeeResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type EmployeeService = typeof EmployeeService;
export const EmployeeService = {
  paySalary: {
    path: "/employee.Employee/paySalary",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EmployeeRequest): Buffer => Buffer.from(EmployeeRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): EmployeeRequest => EmployeeRequest.decode(value),
    responseSerialize: (value: EmployeeResponse): Buffer => Buffer.from(EmployeeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): EmployeeResponse => EmployeeResponse.decode(value),
  },
} as const;

export interface EmployeeServer extends UntypedServiceImplementation {
  paySalary: handleServerStreamingCall<EmployeeRequest, EmployeeResponse>;
}

export interface EmployeeClient extends Client {
  paySalary(request: EmployeeRequest, options?: Partial<CallOptions>): ClientReadableStream<EmployeeResponse>;
  paySalary(
    request: EmployeeRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<EmployeeResponse>;
}

export const EmployeeClient = makeGenericClientConstructor(EmployeeService, "employee.Employee") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EmployeeClient;
  service: typeof EmployeeService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
